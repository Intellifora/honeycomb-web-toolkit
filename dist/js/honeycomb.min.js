(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var accountId = void 0;

var init = function init() {

    // If the account ID is not set, then don't carry on.
    if (!accountId || accountId === 'UA-XXX') {
        console.error('Google Analytics account ID is not set.');
        return false;
    }

    // Add the tracking script.
    addScript();

    // Init the analytics accounts.
    initAccount(accountId);

    // Track a page view.
    trackPageView();

    // Set up tracking alias helper.
    setupTrackingAlias();

    // Track YouTube video views.
    trackYouTubeViews();
};

var setAccountId = function setAccountId(accId) {
    accountId = accId;
};

// Add the Google Analytics script to the page.
var addScript = function addScript() {
    (function (i, s, o, g, r, a, m) {
        i.GoogleAnalyticsObject = r;i[r] = i[r] || function () {
            (i[r].q = i[r].q || []).push(arguments);
        }, i[r].l = 1 * new Date();a = s.createElement(o), m = s.getElementsByTagName(o)[0];a.async = 1;a.src = g;m.parentNode.insertBefore(a, m);
    })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');
};

// Initialise the account, with the account ID.
var initAccount = function initAccount(accountId) {
    if (!accountId || accountId === 'UA-XXX') {
        console.log('Google Analytics account ID is not set.');
        return false;
    }

    ga('create', accountId, 'auto');
};

// Track a page view.
var trackPageView = function trackPageView() {
    var url = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

    if (url) {
        ga('send', 'pageview', {
            'page': url
        });
    } else {
        ga('send', 'pageview');
    }
};

// Track an event.
var trackEvent = function trackEvent() {
    var category = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
    var action = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];
    var label = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
    var value = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

    ga('send', 'event', category, action, label, value);
    console.log(category, action, label, value);
};

// Set a custom variable.
var setCustomVariable = function setCustomVariable(index, name, value, scope) {
    var options = {};
    options['dimension' + index] = value;
    ga('send', 'pageview', options);
};

// Track youtube video views.
var trackYouTubeViews = function trackYouTubeViews() {
    var els = document.querySelectorAll('.lightbox--video');
    for (var i = 0; i < els.length; i++) {
        els[i].addEventListener('click', function () {
            var videoId = undefined.href.replace(/http(s)*:\/\/www.youtube.com\/embed\/|\?.*/g, '');
            trackEvent('Video', window.location.pathname, videoId);
        });
    }
};

// Click track (helper for instead of onclick="ga(send...)".
// Use data-attributes instead. Keeps HTML nicer and easy to update in the
// future).
var setupTrackingAlias = function setupTrackingAlias() {
    var els = document.querySelectorAll('[data-ga-track]');
    for (var i = 0; i < els.length; i++) {
        els[i].addEventListener('click', function () {
            var category = undefined.getAttribute('data-ga-track-category') || null;
            var action = undefined.getAttribute('data-ga-track-action') || null;
            var label = undefined.getAttribute('data-ga-track-label') || null;
            var value = undefined.getAttribute('data-ga-track-value') || null;

            // Process Google tracking event.
            trackEvent(category, action, label, value);
        });
    }
};

exports.default = {
    init: init,
    setAccountId: setAccountId,
    trackPageView: trackPageView,
    trackEvent: trackEvent,
    setCustomVariable: setCustomVariable,
    accountId: accountId
};

},{}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var init = function init() {
    if (typeof window._prum !== 'undefined') {
        var s = document.getElementsByTagName('script')[0];
        var p = document.createElement('script');
        p.async = 'async';
        p.src = '//rum-static.pingdom.net/prum.min.js';
        s.parentNode.insertBefore(p, s);
    }
};

exports.default = {
    init: init
};

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var interval = 5000;
var fadeOutDuration = 1000;
var fadeInDuration = 2500;

var init = function init() {
    if (typeof $ === 'undefined') return;

    $('.js-animate--fade').each(function () {
        var $this = $(this);
        $this.find('.js-animate--fade__item').wrapAll('<div class=\"js-animate--fade__container\"/>');
        $this.find('.js-animate--fade__item').hide().first().show();
        setInterval(step, interval);
    });
};

var step = function step() {
    $('.js-animate--fade').each(function () {
        var $band = $(this);
        var $current = $band.find('.js-animate--fade__item:visible');
        var $next = $current.next('.js-animate--fade__item').length !== 0 ? $current.next('.js-animate--fade__item') : $band.find('.js-animate--fade__item').first();

        $current.fadeOut({
            duration: fadeOutDuration,
            complete: function complete() {
                $next.fadeIn({
                    duration: fadeInDuration
                });
            }
        });
    });
};

exports.default = {
    init: init
};

},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var version = exports.version = 'Version goes here';
var date = exports.date = 'Date goes here';

},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var init = function init() {
    if (isIE7()) {
        addClass('ie7');
    }
};

var addClass = function addClass(className) {
    document.documentElement.classList.add(className);
};

var isIE7 = function isIE7() {
    return navigator.appVersion.indexOf('MSIE 7') !== -1 ? true : false;
};

exports.default = {
    init: init,
    isIE7: isIE7
};

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var init = function init() {
    loadScript();
};

var loadScript = function loadScript() {
    var slick = document.createElement('script');
    var script = document.getElementsByTagName('script')[0];
    slick.async = true;
    slick.src = '//cdn.jsdelivr.net/jquery.slick/1.6.0/slick.min.js';
    slick.onload = function () {
        try {
            loadCarousel();
        } catch (e) {}
    };
    script.parentNode.insertBefore(slick, script);
};

var loadCarousel = function loadCarousel() {
    var carousels = document.querySelectorAll('.js-carousel');

    for (var i = 0; i < carousels.length; i++) {
        var carousel = carousels[i];
        var options = {
            autoplaySpeed: 4000,
            dotsClass: 'slick-dots carousel__pagination',
            adaptiveHeight: true
        };

        // Arrows.
        if (carousel.getAttribute('data-carousel-arrows')) {
            options.arrows = carousel.getAttribute('data-carousel-arrows') === 'true';
        }

        // Autoplay
        if (carousel.getAttribute('data-carousel-autoplay')) {
            options.autoplay = carousel.getAttribute('data-carousel-autoplay') === 'true';
        }

        // Pagination / Dots.
        if (carousel.getAttribute('data-carousel-pagination')) {
            options.dots = carousel.getAttribute('data-carousel-pagination') === 'true';
        }

        // Fade.
        if (carousel.getAttribute('data-carousel-fade')) {
            options.fade = carousel.getAttribute('data-carousel-fade') === 'true';
        }

        // Adaptive Height (Automatically update height)
        if (carousel.getAttribute('data-carousel-auto-height')) {
            options.adaptiveHeight = carousel.getAttribute('data-carousel-auto-height') === 'true';
        }

        // Autoplay speed.
        if (carousel.getAttribute('data-carousel-autoplay-speed')) {
            options.autoplaySpeed = carousel.getAttribute('data-carousel-autoplay-speed');
        }

        if (typeof $ === 'undefined') break;

        $(carousel).slick(options);
    }
};

exports.default = {
    init: init
};

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var vendorUrl = "//alexgorbatchev.com/pub/sh/current/";
var scriptsDir = "scripts/";
var cssDir = "styles/";

var scripts = [vendorUrl + scriptsDir + "shCore.js"];

var styles = [cssDir + "shThemeDefault.css"];

var samples = [];

var brushes = [['applescript', 'shBrushAppleScript.js'], ['actionscript3', 'as3', 'shBrushAS3.js'], ['bash', 'shell', 'shBrushBash.js'], ['coldfusion', 'cf', 'shBrushColdFusion.js'], ['cpp', 'c', 'shBrushCpp.js'], ['c#', 'c-sharp', 'csharp', 'shBrushCSharp.js'], ['css', 'shBrushCss.js'], ['delphi', 'pascal', 'shBrushDelphi.js'], ['diff', 'patch', 'pas', 'shBrushDiff.js'], ['erl', 'erlang', 'shBrushErlang.js'], ['groovy', 'shBrushGroovy.js'], ['java', 'shBrushJava.js'], ['jfx', 'javafx', 'shBrushJavaFX.js'], ['js', 'jscript', 'javascript', 'shBrushJScript.js'], ['perl', 'pl', 'shBrushPerl.js'], ['php', 'shBrushPhp.js'], ['text', 'plain', 'shBrushPlain.js'], ['py', 'python', 'shBrushPython.js'], ['powershell', 'ps', 'posh', 'shBrushPowerShell.js'], ['ruby', 'rails', 'ror', 'rb', 'shBrushRuby.js'], ['sass', 'scss', 'shBrushSass.js'], ['scala', 'shBrushScala.js'], ['sql', 'shBrushSql.js'], ['vb', 'vbnet', 'shBrushVb.js'], ['xml', 'xhtml', 'xslt', 'html', 'shBrushXml.js']];

var isCodeSample = function isCodeSample(sample) {
    var search = "brush:";
    if (sample.className.match(search)) {
        return true;
    }

    return false;
};

var loadStylesheet = function loadStylesheet(sheet) {
    var head = document.getElementsByTagName("head")[0];
    var link = document.createElement("link");
    link.rel = "stylesheet";
    link.href = vendorUrl + sheet;
    head.appendChild(link);
};

var loadScript = function loadScript(src) {
    var scriptNodes = document.getElementsByTagName("script")[0];
    var script = document.createElement("script");
    script.async = true;
    script.src = src;
    scriptNodes.parentNode.insertBefore(script, scriptNodes);
};

var loadBrush = function loadBrush(brush) {
    for (var i = 0; i < brushes.length; i++) {
        if (brushes[i].indexOf(brush) !== -1) {
            var ref = brushes[i][brushes[i].length - 1];
            loadScript(vendorUrl + scriptsDir + ref);
        }
    }
};

var init = function init() {
    samples = getCodeSamples();

    if (samples.length > 0) {
        loadStylesheets();
        loadScripts();
        autoloadBrushes();
    }
};

var getCodeSamples = function getCodeSamples() {
    var pres = document.getElementsByTagName("pre");
    var scripts = document.getElementsByTagName("script");
    var samples = [];

    for (var a = 0; a < pres.length; a++) {
        if (isCodeSample(pres[a])) {
            samples.push(pres[a]);
        }
    }

    for (var b = 0; b < scripts.length; b++) {
        if (isCodeSample(scripts[b])) {
            samples.push(scripts[b]);
        }
    }

    return samples;
};

var loadStylesheets = function loadStylesheets() {
    for (var i = 0; i < styles.length; i++) {
        loadStylesheet(styles[i]);
    }
};

var loadScripts = function loadScripts() {
    for (var i = 0; i < scripts.length; i++) {
        loadScript(scripts[i]);
    }
};

var autoloadBrushes = function autoloadBrushes() {
    var brushesLoaded = [];

    for (var i = 0; i < samples.length; i++) {
        var brush = samples[i].className.match(/brush:[\s]*([a-z#]*)/i)[1];

        if (brushesLoaded.indexOf(brush) === -1) {
            brushesLoaded.push(brush);
            loadBrush(brush);
        }
    }
};

var highlight = function highlight() {
    if (typeof SyntaxHighlighter !== "undefined") {
        SyntaxHighlighter.defaults.toolbar = false;
        SyntaxHighlighter.defaults.gutter = false;
        SyntaxHighlighter.defaults['quick-code'] = false;
        SyntaxHighlighter.highlight();
    }
};

exports.default = {
    init: init,
    highlight: highlight
};

},{}],8:[function(require,module,exports){
'use strict';

var _honeycombAnalytics = require('./analytics/js/honeycomb.analytics.google');

var _honeycombAnalytics2 = _interopRequireDefault(_honeycombAnalytics);

var _honeycombAnalytics3 = require('./analytics/js/honeycomb.analytics.pingdom');

var _honeycombAnalytics4 = _interopRequireDefault(_honeycombAnalytics3);

var _honeycombAnimation = require('./animation/js/honeycomb.animation.fade');

var _honeycombAnimation2 = _interopRequireDefault(_honeycombAnimation);

var _honeycomb = require('./base/js/honeycomb.base');

var _honeycomb2 = require('./browser/js/honeycomb.browser');

var _honeycomb3 = _interopRequireDefault(_honeycomb2);

var _honeycomb4 = require('./carousel/js/honeycomb.carousel');

var _honeycomb5 = _interopRequireDefault(_honeycomb4);

var _honeycomb6 = require('./code/js/honeycomb.code');

var _honeycomb7 = _interopRequireDefault(_honeycomb6);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_honeycombAnalytics2.default.setAccountId('XX-AAA'); // Google analytics.

_honeycombAnalytics2.default.init();

// Pingdom.

_honeycombAnalytics4.default.init();

// Animation.

_honeycombAnimation2.default.init();

// Base.


// Browser.

_honeycomb3.default.init();

// Carousel.

_honeycomb5.default.init();

// Code

_honeycomb7.default.init();
window.addEventListener('load', function () {
    _honeycomb7.default.highlight();
});

},{"./analytics/js/honeycomb.analytics.google":1,"./analytics/js/honeycomb.analytics.pingdom":2,"./animation/js/honeycomb.animation.fade":3,"./base/js/honeycomb.base":4,"./browser/js/honeycomb.browser":5,"./carousel/js/honeycomb.carousel":6,"./code/js/honeycomb.code":7}]},{},[8]);

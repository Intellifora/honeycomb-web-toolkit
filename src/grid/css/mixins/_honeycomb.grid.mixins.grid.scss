/*------------------------------------*\
    #GRID MIXIN
\*------------------------------------*/


/**
 * This mixin generates the available CSS grid classes from grid settings.
 * CSS grid classes must be enabled in settings for this to work.
 *
 */
@mixin buildGrid ($gutter: 0, $suffix: "") {
    @if $enable-grid-classes {
        @include build($gutter, $suffix);
        @include build($gutter, $suffix, "push", "margin-left");
    } @else {
        @warn "CSS grid classes are disabled. Please enable CSS grid classes using `$enable-grid-classes: true`";
    }
}

@mixin build ($gutter: 0, $suffix: "", $action: "span", $property: "width") {
    @if $enable-grid-classes {

        $important: "";
        @if $action == "push" {
            $important: "!important";
        }

        @each $grid-col in $grid-cols {
            @for $i from 1 through $grid-col {

                $total: calculateGridTotal($grid-col, $i, $gutter, $action);

                %#{$grid-class}__col--#{$action}-#{$i}-of-#{$grid-col}#{$suffix},
                .#{$grid-class}__col--#{$action}-#{$i}-of-#{$grid-col}#{$suffix} {
                    #{$property}: $total * 1% #{$important};

                    @if $action == "push" {
                        &:first-of-type {
                            $total: $total - $gutter;
                            #{$property}: $total * 1% #{$important};
                        }
                    }

                    .#{$grid-class}__row--no-gutter &.#{$grid-class}__col {
                        $total: calculateGridTotal($grid-col, $i, $gutter, $action, true);
                        #{$property}: ($total) * 1% #{$important};
                    }
                }
            }
        }
    } @else {
        @warn "CSS grid classes are disabled. Please enable CSS grid classes using `$enable-grid-classes: true`";
    }
}
